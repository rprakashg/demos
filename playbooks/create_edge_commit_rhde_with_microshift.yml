---
- name: Create edge commit
  hosts: imagebuilder
  tasks:
  - name: load secrets from ansible vault
    include_vars:
      file: "./vars/secrets.yml"
  - name: build edge commit
    ansible.builtin.include_role:
      name: rprakashg.demos.build_edge_commit
    vars:
      builder_blueprint_name: rhde
      builder_blueprint_description: "Base Red Hat Device Edge 9.4 blueprint"
      builder_blueprint_distro: "rhel-9"
      builder_compose_pkgs:
      - cockpit
      - cockpit-ostree
      - cockpit-podman
      - greenboot
      - greenboot-grub2
      - greenboot-default-health-checks
      - microshift
      - microshift-greenboot
      - microshift-networking
      - microshift-release-info
      - microshift-selinux
      - lvm2
      builder_compose_customizations:
        services:
          enabled: ["microshift", "cockpit.socket", "podman.socket", "podman.service", "firewalld", "rpm-ostreed-automatic.timer", "podman-auto-update.timer", "applyupdate.timer"]
        firewall:
          services:
            enabled: ["http", "https", "ssh", "cockpit", "kube-apiserver", "kube-nodeport-services", "dhcpv6-client"]
            disabled: ["telnet"]
          ports: ["8080:tcp", "9090:tcp", "8081:tcp", "8089:tcp", "8096:tcp", "8443:tcp", "8480:tcp", "9091:tcp", "9099:tcp"]
        directories:
        - path: "/etc/systemd/system/podman-auto-update.timer.d"
        - path: "/etc/greenboot/check/required.d"
        files:
        - path: "/etc/systemd/system/podman-auto-update.timer.d/splay.conf"
          data: |
            [Timer]
            RandomizedDelaySec=7200
        - path: "/etc/rpm-ostreed.conf"
          data: |
            [Daemon]
            AutomaticUpdatePolicy=stage
        - path: "/etc/systemd/system/applyupdate.service"
          data: |
            [Unit]
            Description=Apply Update Check

            [Service]
            Type=oneshot
            ExecStart=/bin/sh -c 'if [[ $(rpm-ostree status -v | grep "Staged: yes") ]]; then systemctl --message="Applying OTA update" reboot; else logger "Running latest available update"; fi
        - path: "/etc/systemd/system/applyupdate.timer"
          data: |
            [Unit]
            Description=Daily Update Reboot Check

            [Timer]
            OnCalendar=Sun *-*-* 00:00:00

            [Install]
            WantedBy=multi-user.target
        - path: "/etc/systemd/journald.conf.d/microshift.conf"
          data: |
            [Journal]
            Storage=persistent
            SystemMaxUse=1G
            RuntimeMaxUse=1G
        - path: "/etc/microshift/lvmd.yaml"
          data: |
            # Unix domain socket endpoint of gRPC
            socket-name: /run/lvmd/lvmd.socket
            device-classes:
              # The name of a device-class
              - name: default
                # The group where this device-class creates the logical volumes
                volume-group: rhel
                # Storage capacity in GiB to be spared
                spare-gb: 100
                # A flag to indicate that this device-class is used by default
                default: true
        - path: "/etc/microshift/manifests.d/argocd/kustomization.yaml"
          data: |
            apiVersion: kustomize.config.k8s.io/v1beta1
            kind: Kustomization
            namespace: argocd
            resources:
            - namespace.yaml
            - https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        - path: "/etc/microshift/manifests.d/argocd/namespace.yaml"
          data: |
            apiVersion: v1
            kind: Namespace
            metadata:
              name: argocd
              labels:
                name: argocd
        - path: "/etc/greenboot/check/required.d/40_microshift_running_check.sh"
          data: |
            #!/bin/bash
            set -e

            SCRIPT_NAME=$(basename \"$0\")
            SCRIPT_PID=$$
            PODS_NS_LIST=(openshift-ovn-kubernetes openshift-service-ca openshift-ingress openshift-dns openshift-storage kube-system)
            PODS_CT_LIST=(2                        1                    1                 2             2                 3)
            RETRIEVE_PODS=false

            # Set Greenboot to read and execute the workload health check functions library.
            source /usr/share/microshift/functions/greenboot.sh

            # Set the term handler to convert exit code to 1
            trap 'forced_termination' TERM SIGINT

            # Set the exit handler to log the exit status.
            trap 'script_exit' EXIT

            # Handler that will be called when the script is terminated by sending TERM or
            # INT signals. To override default exit codes it forces returning 1 like the
            # rest of the error conditions throughout the health check.
            function forced_termination() {
                echo \"Signal received, terminating.\"
                exit 1
            }

            # Set the script exit handler to log a `FAILURE` or `FINISHED` message depending on the exit status of the last command.
            # args: None
            # return: None
            function script_exit() {
                [ \"$?\" -ne 0 ] && status=FAILURE || status=FINISHED
                echo $status
            }

            # Set the system to automatically stop the script if the user running it is not 'root'.
            if [ $(id -u) -ne 0 ] ; then
                echo \"The '${SCRIPT_NAME}' script must be run with the 'root' user privileges\"
                exit 1
            fi

            # Print the boot variable status
            print_boot_status

            # Set the script to stop without reporting an error if the MicroShift service is not running.
            if [ $(systemctl is-enabled microshift.service 2>/dev/null) != "enabled" ] ; then
                echo \"MicroShift service is not enabled. Exiting...\"
                exit 0
            fi

            # Set the wait timeout for the current check based on the boot counter.
            WAIT_TIMEOUT_SECS=$(get_wait_timeout)

            # Wait for Microshift service to be active
            echo \"Waiting for Microshift service to be active.\"
            if ! wait_for "${WAIT_TIMEOUT_SECS}" check_microshift_service; then
                echo \"Timeout occurred waiting for microshift service to be active.\"
                exit 1
            fi

            # Wait for  Microshift api healthchecks to pass
            echo \"Waiting for microshift api health checks to pass.\"
            if ! wait_for "${WAIT_TIMEOUT_SECS}" is_microshift_healthy; then
                echo \"health-readyz ${OCGET_CMD} --raw=/readyz?verbose.\"
                echo \"health-livez  ${OCGET_CMD} --raw=/livez?verbose.\"

                echo \"Timeout occurred waiting for Microshift api health checks.\"
                exit 1
            fi

            # Set the script to wait for the pod images to be downloaded.
            for i in ${!PODS_NS_LIST[@]}; do
                CHECK_PODS_NS=${PODS_NS_LIST[$i]}

                echo \"Waiting ${WAIT_TIMEOUT_SECS}s for pod image(s) from the ${CHECK_PODS_NS} namespace to be downloaded.\"
                wait_for ${WAIT_TIMEOUT_SECS} namespace_images_downloaded
            done

            # Set the script to wait for pods to enter ready state.
            for i in ${!PODS_NS_LIST[@]}; do
                CHECK_PODS_NS=${PODS_NS_LIST[$i]}
                CHECK_PODS_CT=${PODS_CT_LIST[$i]}

                echo \"Waiting ${WAIT_TIMEOUT_SECS}s for ${CHECK_PODS_CT} pod(s) from the ${CHECK_PODS_NS} namespace to be in 'Ready' state.\"
                wait_for ${WAIT_TIMEOUT_SECS} namespace_pods_ready
            done

            # Verify that pods are not restarting by running, which could indicate a crash loop.
            for i in ${!PODS_NS_LIST[@]}; do
                CHECK_PODS_NS=${PODS_NS_LIST[$i]}

                echo \"Checking pod restart count in the ${CHECK_PODS_NS} namespace.\"
                namespace_pods_not_restarting ${CHECK_PODS_NS}
            done

            # Check the microshift.service systemd unit activity, terminating the script
            # with the SIGTERM signal if the unit reports a failed state
            #
            # args: None
            # return: 0 if the systemd unit is active, or 1 otherwise
            function check_microshift_service() {
                local -r is_failed=$(systemctl is-failed microshift.service)
                local -r is_active=$(systemctl is-active microshift.service)

                # Terminate the script in case of a failed service - nothing to wait for
                if [ "${is_failed}" = "failed" ] ; then
                    echo \"The microshift.service systemd unit has failed. Terminating...\"
                    kill -TERM ${SCRIPT_PID}
                fi

                # Check the service activity
                [ \"${is_active}\" = \"active\" ] && return 0
                return 1
            }

            # Check if MicroShift API 'readyz' and 'livez' health endpoints are OK
            #
            # args: None
            # return: 0 if all API health endpoints are OK, or 1 otherwise
            function is_microshift_healthy() {
                local -r check_rd=$(${OCGET_CMD} --raw='/readyz?verbose' | awk '$2 != "ok"')
                local -r check_lv=$(${OCGET_CMD} --raw='/livez?verbose'  | awk '$2 != "ok"')

                [ \"${check_rd}\" != \"readyz check passed\" ] && return 1
                [ \"${check_lv}\" != \"livez check passed\"  ] && return 1
                return 0
            }

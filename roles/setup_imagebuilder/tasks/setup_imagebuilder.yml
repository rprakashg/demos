---
- name: setup imagebuilder server
  block:
  - name: install epel 9 latest release
    ansible.builtin.dnf:
      state: present
      name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm

  - name: install required packages
    ansible.builtin.dnf:
      state: present
      name: "{{ packages }}"
    vars:
      packages:
      - osbuild
      - osbuild-composer
      - git
      - composer-cli
      - ostree
      - rpm-ostree
      - cockpit-composer
      - bash-completion
      - podman
      - runc
      - genisoimage
      - createrepo
      - yum-utils
      - selinux-policy-devel
      - jq
      - wget
      - lorax
      - rpm-build
      - containernetworking-plugins
      - firewalld
      - python3
      - python3-pip
      - python3-toml
      - s3fs-fuse

  - name: install aws cli
    ansible.builtin.command:
      cmd: pip3 install awscli boto3 botocore

  - name: enable cockpit/composer/firewalld/podman
    ansible.builtin.systemd:
      state: started
      enabled: true
      name: "{{ item }}"
    loop:
      - osbuild-composer.socket
      - cockpit.socket
      - podman.socket
      - firewalld
      
  - name: configure firewall to allow access to web console
    ansible.posix.firewalld:
      permanent: true
      immediate: true
      service: "{{ item }}"
      state: enabled
    loop:
      - cockpit

- name: setup imagebuilder with microshift
  when: microshift | default(true)
  block:
  - name: "creating rhocp-{{ microshift_release }}.toml file"
    ansible.builtin.tempfile:
      state: file
      suffix: toml
    register: microshift_source

  - name: creating rhocp-{{ microshift_release }}.toml configuration file
    copy:
      dest: "{{ microshift_source.path }}"
      content: |
        id = "rhocp-{{ microshift_release }}"
        name = "Microshift version {{ microshift_release }}"
        type = "yum-baseurl"
        url = "https://cdn.redhat.com/content/dist/layered/rhel9/{{ ansible_architecture }}/rhocp/{{ microshift_release }}/os"
        check_gpg = true
        check_ssl = true
        system = false
        rhsm = true
  
  - name: "creating fastdatapath.toml file"
    ansible.builtin.tempfile:
      state: file
      suffix: toml
    register: fastdatapath_source

  - name: create fast-datapath.toml configuration file
    copy:
      dest: "{{ fastdatapath_source.path }}"
      content: |
        id = "fast-datapath"
        name = "Fast Datapath for RHEL 9 System"
        type = "yum-baseurl"
        url = "https://cdn.redhat.com/content/dist/layered/rhel9/{{ ansible_architecture }}/fast-datapath/os"
        check_gpg = true
        check_ssl = true
        system = false
        rhsm = true

  - name: add sources to image builder
    command: "sudo composer-cli sources add {{ item }}"
    loop:
      - "{{ microshift_source.path }}"
      - "{{ fastdatapath_source.path }}"

- name: add pull-secret to image builder
  block:
  - name: include secrets
    include_vars:
      file: "./vars/secrets.yml"
  - name: create /etc/osbuild-worker directory
    ansible.builtin.file:
      path: /etc/osbuild-worker
      state: directory
  - name: create the pull-secret.json file
    ansible.builtin.copy:
      content: "{{ pull_secret }}"
      dest: /etc/osbuild-worker/pull-secret.json
  - name: create osbuild worker toml
    ansible.builtin.copy:
      content: |
        [containers]
        auth_file_path = "/etc/osbuild-worker/pull-secret.json"
      dest: /etc/osbuild-worker/osbuild-worker.toml
      
- name: reboot imagebuilder
  block:
  - name: rebooting server
    ansible.builtin.reboot:
      msg: "Reboot initiated by Ansible"
      connect_timeout: 5
      reboot_timeout: 300
      pre_reboot_delay: 0
      post_reboot_delay: 30
      test_command: uptime
  - name: Pinging the imagebuilder
    ansible.builtin.ping:
  - debug:
      msg: "Finished rebooting imagebuilder"

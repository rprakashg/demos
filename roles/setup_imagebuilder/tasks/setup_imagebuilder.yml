---
- name: Setup imagebuilder
  block:
  - name: Install packages
    ansible.builtin.dnf:
      state: latest
      name: "{{ packages }}"
    vars:
      packages:
      - podman
      - rsync
      - osbuild-composer
      - composer-cli
      - cockpit-composer
      - bash-completion
      - firewalld
      - genisoimage
      - httpd
      - syslinux
      - cockpit
      - weldr-client
      - python3
      - lorax
      - pykickstart
      - coreutils
      - glibc-minimal-langpack
      - mtools
      - xorriso
      - isomd5sum
      - butane
      - rpmdevtools
      - rpmlint
      - yum-utils
      - createrepo
      - tree
      - python3-pip
      - python3-toml
      - gnupg    
  - name: enable cockpit/composer/firewalld/podman
    ansible.builtin.systemd:
      state: started
      enabled: true
      name: "{{ item }}"
    loop:
      - osbuild-composer.socket
      - cockpit.socket
      - podman.socket
      - firewalld
      - httpd.service
  - name: configure firewall to allow access to web console
    ansible.posix.firewalld:
      permanent: true
      immediate: true
      service: "{{ item }}"
      state: enabled
    loop:
      - cockpit
      - http
  - name: install aws cli
    ansible.builtin.command:
      cmd: pip3 install awscli boto3 botocore
      
- name: setup imagebuilder with microshift
  when: microshift | default(true)
  block:
  - name: "creating rhocp-{{ microshift_release }}.toml file"
    ansible.builtin.tempfile:
      state: file
      suffix: toml
    register: microshift_source

  - name: creating rhocp-{{ microshift_release }}.toml configuration file
    ansible.builtin.copy:
      dest: "{{ microshift_source.path }}"
      content: |
        id = "rhocp-{{ microshift_release }}"
        name = "Microshift version {{ microshift_release }}"
        type = "yum-baseurl"
        url = "https://cdn.redhat.com/content/dist/layered/rhel9/{{ ansible_architecture }}/rhocp/{{ microshift_release }}/os"
        check_gpg = true
        check_ssl = true
        system = false
        rhsm = true
  
  - name: "creating fastdatapath.toml file"
    ansible.builtin.tempfile:
      state: file
      suffix: toml
    register: fastdatapath_source

  - name: create fast-datapath.toml configuration file
    ansible.builtin.copy:
      dest: "{{ fastdatapath_source.path }}"
      content: |
        id = "fast-datapath"
        name = "Fast Datapath for RHEL 9 System"
        type = "yum-baseurl"
        url = "https://cdn.redhat.com/content/dist/layered/rhel9/{{ ansible_architecture }}/fast-datapath/os"
        check_gpg = true
        check_ssl = true
        system = false
        rhsm = true

  - name: add sources to image builder
    ansible.builtin.command: "sudo composer-cli sources add {{ item }}"
    loop:
      - "{{ microshift_source.path }}"
      - "{{ fastdatapath_source.path }}"

- name: Setup custom rpm repo for greenboot failing package and add to imagebuilder sources
  block:
  - name: create a directory to store the greenboot failing RPM package
    ansible.builtin.file:
      path: ~/custom-rpms
      state: directory
      mode: "0755"
  - name: Download the green boot failing package 
    ansible.builtin.get_url:
      url: https://kite-webhook-prod.s3.amazonaws.com/greenboot-failing-unit-1.0-1.el8.noarch.rpm
      dest: ~/custom-rpms
      mode: '0755'
  - name: createrepo
    ansible.builtin.shell: |
      createrepo ~/custom-rpms
      chmod a+rx ~
  - name: create a temp toml file
    ansible.builtin.tempfile:
      state: file
      suffix: toml
    register: greenboot_local_source
  - name: create local source toml file
    ansible.builtin.copy:
      dest: "{{ greenboot_local_source.path }}"
      content: |
        id = "local-rpm-packages"
        name = "Local RPM packages"
        type = "yum-baseurl"
        url = "file:///root/custom-rpms"
        check_gpg = false
        check_ssl = false
        system = false
  - name: add source to image builder
    ansible.builtin.shell: |
      sudo composer-cli sources add "{{ greenboot_local_source.path }}"
  - name: refresh repo
    ansible.builtin.shell: |
      createrepo --update /root/custom-rpms

- name: add pull-secret to image builder
  block:
  - name: create /etc/osbuild-worker directory
    ansible.builtin.file:
      path: /etc/osbuild-worker
      state: directory
  - name: create the pull-secret.json file
    ansible.builtin.copy:
      content: "{{ pull_secret }}"
      dest: /etc/osbuild-worker/pull-secret.json
  - name: create osbuild worker toml
    ansible.builtin.copy:
      content: |
        [containers]
        auth_file_path = "/etc/osbuild-worker/pull-secret.json"
      dest: /etc/osbuild-worker/osbuild-worker.toml

- name: generate a GPG key for signing commits built
  when: create_gpg_key | default(true)
  block:
  - name: generate the key
    ansible.builtin.shell: |
      gpg --batch --generate-key <<EOF
        %echo Generating a GPG key
        Key-Type: RSA
        Key-Length: 2048
        Subkey-Type: RSA
        Subkey-Length: 2048
        Name-Real: "{{ build_user }}"
        Name-Email: "{{ build_user_email }}"
        Expire-Date: "{{ key_expiration }}"
        Passphrase: "{{ signing_key_passphrase }}"
        %commit
        %echo Done
      EOF
  - name: List keys
    ansible.builtin.shell: |
      gpg --list-keys
    register: list_keys_result
  - name: Extract the Key ID
    ansible.builtin.set_fact:
      gpg_key_id: "{{ list_keys_result.stdout | regex_search('pub\\s+\\S+\\s+\\S+\\s+\\[(\\S+)\\n\\s+([A-F0-9])', '\\2') }}"
  - name: Debug key id
    ansible.builtin.debug:
      msg: "GPG Key ID: {{ gpg_key_id }}"

- name: Add user to weldr
  ansible.builtin.user:
    name: "{{ ansible_user }}"
    groups: weldr
    append: true
          
- name: reboot imagebuilder
  block:
  - name: rebooting server
    ansible.builtin.reboot:
      msg: "Reboot initiated by Ansible"
      connect_timeout: 5
      reboot_timeout: 300
      pre_reboot_delay: 0
      post_reboot_delay: 30
      test_command: uptime
  - name: Pinging the imagebuilder
    ansible.builtin.ping:
  - debug:
      msg: "Finished rebooting imagebuilder"

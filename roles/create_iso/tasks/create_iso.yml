---
- name: Start
  ansible.builtin.debug:
    msg: "Starting building ISO installer for image {{ blueprint_name }}"

- name: check input blueprint is passed
  assert:
    that:
    - blueprint_name != ""
    fail_msg: "blueprint must be specified to build image"

- name: Create the installer blueprint and push it to imagebuilder
  block:
  - name: Create a temp file for installer blueprint
    ansible.builtin.tempfile:
      state: file
      suffix: toml
    register: builder_installer_blueprint
  - name: set the blueprint file in fact
    ansible.builtin.set_fact:
      rfe_installer_blueprint: "{{ builder_installer_blueprint.path }}"
  - name: Create installer blueprint
    infra.osbuild.create_blueprint:
      dest: "{{ rfe_installer_blueprint }}"
      name: "{{ builder_blueprint_name }}"
      description: "{{ builder_blueprint_desc }}"
      distro: "{{ builder_blueprint_distro | default(omit) }}"
      packages: "{{ builder_compose_pkgs | default(omit) }}"
      customizations: "{{ builder_compose_customizations | default(omit) }}"
  - name: Push the installer blueprint to imagebuilder
    infra.osbuild.push_blueprint:
      src: "{{ rfe_installer_blueprint }}"

- name: Start compose and wait for it to finish
  block:
  - name: "Set ostree url"
    ansible.builtin.set_fact: 
      ostree_repo_url: "http://{{ subdomain }}.{{ base_domain }}/{{ blueprint_name }}/repo"
  - name: compose
    ansible.builtin.shell: |
      composer-cli --json compose start-ostree {{ builder_blueprint_name }} \
        edge-simplified-installer \
        --ref "{{ blueprint_ref }}" \
        --url "{{ ostree_repo_url }}" | jq -r ".[].body.build_id"
    register: start_compose_result
  - name: debug result
    ansible.builtin.debug:
      var: start_compose_result
  - name: set job id
    set_fact:
      job_id: "{{ start_compose_result.stdout }}"
  - name: Wait for compose to finish
    ansible.builtin.shell: |
      composer-cli --json compose info {{ job_id }} | jq -r ".[].body.queue_status"
    until: check_status_result.stdout not in ["RUNNING", "WAITING"]
    retries: "{{ retries }}"
    delay: "{{ delay }}"
    register: check_status_result

- name: Download artifact
  when: 
  - check_status_result.stdout == "FINISHED"
  block:
  - name: create a temp dir
    ansible.builtin.tempfile:
      state: directory
      suffix: "{{ blueprint_name }}"
    register: tempdir_result
  - name: set artifact dir
    ansible.builtin.set_fact:
      artifact_dir: "{{ tempdir_result.path }}"
  - name: set full artifact filename
    ansible.builtin.set_fact:
      artifact_file: "{{ artifact_dir }}/{{ blueprint_name }}-{{ job_id }}.iso"
  - name: download artifact
    ansible.builtin.shell: |
      composer-cli compose image "{{ job_id }}" --filename "{{ artifact_file }}"

- name: Create kickstart file
  block:
  - name: create a temp file for kickstart
    ansible.builtin.tempfile:
      state: file
      suffix: ks
    register: builder_kickstart
  - name: store file in fact
    ansible.builtin.set_fact:
      kickstart: "{{ builder_kickstart.path }}"
  - name: generate kickstart content
    ansible.builtin.template:
      src: "kickstart.ks.j2"
      dest: "{{ kickstart }}"
  - name: slurp kickstart file to output
    ansible.builtin.slurp:
      src: "{{ kickstart }}"
    register: kickstart_content
  - name: display kickstart contents
    ansible.builtin.debug:
      msg: "{{ kickstart_content['content'] | b64decode }}" 

- name: Inject kickstart into ISO
  infra.osbuild.inject_ks:
    kickstart: "{{ kickstart }}"
    src_iso: "{{ artifact_file }}"
    dest_iso: "{{ artifact_dir }}/{{ blueprint_name }}-{{ job_id }}-ks.iso"

- name: Upload the ISO to s3 bucket
  when:
  - check_status_result.stdout == "FINISHED"
  ansible.builtin.shell: |
    aws s3 cp "{{ artifact_file }}" "s3://{{ iso_bucket_name }}/{{ artifact_file | basename }}"
- name: Upload the ISO with custom kickstart injected also to s3 bucket
  when:
  - check_status_result.stdout == "FINISHED"
  ansible.builtin.shell: |
    aws s3 cp "{{ artifact_dir }}/{{ blueprint_name }}-{{ job_id }}-ks.iso" "s3://{{ iso_bucket_name }}/{{ blueprint_name }}-{{ job_id }}-ks.iso"

- name: cleanup
  when: artifact_dir is defined
  ansible.builtin.file:
    path: "{{ artifact_dir }}"
    state: absent
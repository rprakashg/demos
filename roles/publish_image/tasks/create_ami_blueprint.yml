---    
- name: start
  ansible.builtin.debug:
    msg: "Creating ami images for blueprint {{ blueprint_name }}"  

- name: Set edge ami blueprint filename
  ansible.builtin.set_fact:
    edge_ami_blueprint: "{{ blueprints_dir }}/edge-ami-image.toml"

- name: Get edge ami blueprint
  ansible.builtin.stat:
    path: "{{ edge_ami_blueprint }}"
  register: file_stat

- name: Create edge ami blueprint if one doesn't exist
  when:
  - not file_stat.stat.exists
  ansible.builtin.template:
    src: edge-ami-image.toml.j2
    dest: "{{ edge_ami_blueprint }}"

- name: Push edge ami blueprint to composer if not already added
  block:  
  - name: check if blueprint is already added to osbuild
    ansible.builtin.shell: composer-cli --json blueprints show "edge-ami-image" 
    register: blueprint_show_result
    ignore_errors: yes
  - name: push blueprint
    when: blueprint_show_result.rc != 0
    ansible.builtin.shell: composer-cli blueprints push "{{ edge_ami_blueprint }}"
  - name: depsolve
    ansible.builtin.shell: composer-cli blueprints depsolve "edge-ami-image"

- name: set ami description
  block:
  - name: get blueprint description
    ansible.builtin.shell: |
      composer-cli --json blueprints show edge-ami-image | jq -r ".[].body.blueprints[].description"
    register: get_blueprint_desc_result
  - name: set ami description
    ansible.builtin.set_fact:
      ami_description: "{{ get_blueprint_desc_result.stdout }}"

- name: Start compose
  block:
  - name: set ostree url
    ansible.builtin.set_fact:
      ostree_repo_url: "http://{{ ansible_host }}/{{ blueprint_name }}/repo"
  - name: start compose
    ansible.builtin.shell: |
      composer-cli --json compose start-ostree "edge-ami-image" ami --ref="{{ blueprint_rev }}" --url="{{ ostree_repo_url }}" | jq -r ".[].body.build_id"
    register: start_compose_result
  - name: set job id
    set_fact:
      job_id: "{{ start_compose_result.stdout }}"
  - name: wait for compose to finish
    ansible.builtin.shell: |
      composer-cli --json compose info {{ job_id }} | jq -r ".[].body.queue_status"
    until: check_status_result.stdout not in ["RUNNING", "WAITING"]
    retries: "{{ retries }}"
    delay: "{{ delay }}"
    register: check_status_result

- name: Download compose artifact and upload it to the AMI S3 bucket
  when: check_status_result.stdout == "FINISHED"
  block:
  - name: create a temp dir
    ansible.builtin.tempfile:
      state: directory
      suffix: "{{ blueprint_name }}"
      mode: '0755'
      owner: "{{ ansible_user }}"
    register: tempdir_result
  - name: set artifact dir
    ansible.builtin.set_fact:
      artifact_dir: "{{ tempdir_result.path }}"
  - name: set full artifact filename
    ansible.builtin.set_fact:
      artifact_filename: "{{ artifact_dir }}/{{ job_id }}-ami.raw"
  - name: download artifact
    ansible.builtin.shell: |
      composer-cli compose image "{{ job_id }}" --filename "{{ artifact_filename }}"
  - name: upload artifact to s3
    become: false
    ansible.builtin.shell: |
      aws s3 cp "{{ artifact_filename }}" "s3://{{ ami_bucket_name }}"
  - name: set ami url
    ansible.builtin.set_fact:
      ami_url: "s3://{{ ami_bucket_name }}/{{ artifact_filename | basename }}"

- name: Import snapshot
  when: check_status_result.stdout == "FINISHED"
  block:
  - name: create container simple json
    ansible.builtin.template:
      src: container-simple.json.j2
      dest: "{{ artifact_dir }}/container-simple.json"
  - name: import snapshot
    become: false
    ansible.builtin.shell: |
      aws ec2 import-snapshot --description "{{ ami_description }} - {{ blueprint_name }}" \
        --disk-container file://"{{ artifact_dir }}/container-simple.json" --region "{{ aws_region }}"
    register: import_snapshot_result
  - name: debug import snapshot result
    ansible.builtin.debug:
      var: import_snapshot_result

  - name: parse result as json
    ansible.builtin.set_fact:
      import_snapshot_json: "{{ import_snapshot_result.stdout | from_json }}"

  - name: check if import snapshot task complete
    become: false
    ansible.builtin.shell: |
      aws ec2 describe-import-snapshot-tasks \
        --import-task-ids="{{ import_snapshot_json.ImportTaskId }}" --query="ImportSnapshotTasks[0].SnapshotTaskDetail.Status" --output=text
    until: describe_snapshot_tasks_result == "completed"
    retries: "{{ retries }}"
    delay: "{{ delay }}"
    register: describe_snapshot_tasks_result

  - name: Get the ami id
    become: false
    ansible.builtin.shell: |
      aws ec2 describe-images --region="{{ aws_region }}" --query="Images[0].ImageId" \
        --filters="Name=Description, Values={{ ami_description }}" \
        --output=text
    register: describe_images_result

  - name: Debug describe images result
    ansible.builtin.debug:
      msg: "AMI ID: {{ describe_images_result.stdout }}"
---    
- name: start
  ansible.builtin.debug:
    msg: "Creating ami images for blueprint {{ blueprint_name }}"  

- name: check if blueprint is already added to osbuild
  ansible.builtin.shell: composer-cli --json blueprints show "edge-ami-image" 
  register: blueprint_show_result
  ignore_errors: yes

- name: create an edge ami blueprint and push it to osbuild
  when: 
  - blueprint_show_result.rc != 0
  block:
  - name: create a temp file for edge ami blueprint
    ansible.builtin.tempfile:
      state: file
      suffix: toml
    register: builder_ami_blueprint
  - name: Set edge ami blueprint filename
    ansible.builtin.set_fact:
      edge_ami_blueprint: "{{ builder_ami_blueprint.path }}"
  - name: Create edge ami blueprint
    ansible.builtin.template:
      src: edge-ami-image.toml.j2
      dest: "{{ edge_ami_blueprint }}"
  - name: push blueprint
    ansible.builtin.shell: composer-cli blueprints push "{{ edge_ami_blueprint }}"
  - name: depsolve
    ansible.builtin.shell: composer-cli blueprints depsolve "edge-ami-image"

- name: set ami description
  block:
  - name: get blueprint description
    ansible.builtin.shell: |
      composer-cli --json blueprints show edge-ami-image | jq -r ".[].body.blueprints[].description"
    register: get_blueprint_desc_result
  - name: set ami description
    ansible.builtin.set_fact:
      ami_description: "{{ get_blueprint_desc_result.stdout }}"

- name: Start compose and wait for it to finish
  block:
  - name: set ostree url
    ansible.builtin.set_fact:
      ostree_repo_url: "http://{{ ansible_host }}/{{ blueprint_name }}/repo"
  - name: start compose
    ansible.builtin.shell: |
      composer-cli --json compose start-ostree "edge-ami-image" edge-ami --ref="{{ blueprint_rev }}" --url="{{ ostree_repo_url }}" | jq -r ".[].body.build_id"
    register: start_compose_result
  - name: set job id
    set_fact:
      job_id: "{{ start_compose_result.stdout }}"
  - name: wait for compose to finish
    ansible.builtin.shell: |
      composer-cli --json compose info {{ job_id }} | jq -r ".[].body.queue_status"
    until: check_status_result.stdout not in ["RUNNING", "WAITING"]
    retries: "{{ retries }}"
    delay: "{{ delay }}"
    register: check_status_result

- name: Download compose artifact and upload to s3
  when: check_status_result.stdout == "FINISHED"
  block:
  - name: create a temp dir
    ansible.builtin.tempfile:
      state: directory
      suffix: "{{ blueprint_name }}"
    register: tempdir_result
  - name: set artifact dir
    ansible.builtin.set_fact:
      artifact_dir: "{{ tempdir_result.path }}"
  - name: set full artifact filename
    ansible.builtin.set_fact:
      artifact_filename: "{{ artifact_dir }}/{{ job_id }}-ami.raw"
  - name: download artifact
    ansible.builtin.shell: |
      composer-cli compose image "{{ job_id }}" --filename "{{ artifact_filename }}"
  - name: upload artifact to s3
    ansible.builtin.shell: |
      aws s3 cp "{{ artifact_filename }}" "s3://{{ ami_bucket_name }}"
  - name: delete local file
    ansible.builtin.file:
      state: absent
      path: "{{ artifact_filename }}"
  - name: set ami url
    ansible.builtin.set_fact:
      ami_url: "s3://{{ ami_bucket_name }}/{{ artifact_filename | basename }}"

- name: Import snapshot
  when: check_status_result.stdout == "FINISHED"
  block:
  - name: create container simple json
    ansible.builtin.template:
      src: container-simple.json.j2
      dest: "{{ artifact_dir }}/container-simple.json"
      
  - name: import snapshot
    ansible.builtin.shell: |
      aws ec2 import-snapshot --description "{{ ami_description }} - {{ blueprint_name }}" \
        --disk-container file://"{{ artifact_dir }}/container-simple.json" --region "{{ aws_region }}"
    register: import_snapshot_result

  - name: debug import snapshot result
    ansible.builtin.debug:
      var: import_snapshot_result

  - name: parse result as json
    ansible.builtin.set_fact:
      import_snapshot_json: "{{ import_snapshot_result.stdout | from_json }}"

  - name: check if import snapshot task complete
    ansible.builtin.shell: |
      aws ec2 describe-import-snapshot-tasks \
        --import-task-ids="{{ import_snapshot_json.ImportTaskId }}" \
        --query="ImportSnapshotTasks[0].SnapshotTaskDetail.Status" --output=text \
        --region="{{ aws_region }}"
    until: describe_snapshot_tasks_result.stdout == "completed"
    retries: "{{ retries }}"
    delay: "{{ delay }}"
    register: describe_snapshot_tasks_result

- name: Get snapshot id
  when: describe_snapshot_tasks_result.stdout == "completed"
  block:
  - name: Get snapshot id
    ansible.builtin.shell: |
      aws ec2 describe-import-snapshot-tasks \
          --import-task-ids="{{ import_snapshot_json.ImportTaskId }}" \
          --query="ImportSnapshotTasks[0].SnapshotTaskDetail.SnapshotId" \
          --output=text --region="{{ aws_region }}"
    register: get_snapshot_id_result

  - name: Set snapshot id
    ansible.builtin.set_fact:
      snapshot_id: "{{ get_snapshot_id_result.stdout }}"
        
- name: Register AMI
  when: describe_snapshot_tasks_result.stdout == "completed"
  block:
  - name: Start
    ansible.builtin.debug:
      msg: "Registering AMI"
  - name: register
    ansible.builtin.shell: |
      aws ec2 register-image \
        --name "{{ blueprint_name }}-ami-x86" \
        --architecture x86_64 \
        --tag-specifications 'ResourceType=image,Tags=[{Key=Name,Value={{ blueprint_name }}-ami-x86}]' \
        --root-device-name /dev/sda1 \
        --block-device-mappings DeviceName=/dev/sda1,Ebs={SnapshotId={{ snapshot_id }}} DeviceName=/dev/sdh,Ebs={VolumeSize=100} \
        --boot-mode uefi-preferred --query="ImageId" --output=text \
        --region="{{ aws_region }}"
    register: register_ami_result
  - name: set ami id
    ansible.builtin.set_fact:
      ami_id: "{{ register_ami_result.stdout }}"
  - name: debug new ami id
    ansible.builtin.debug:
      msg: "New AMI ID: {{ ami_id }}"

- name: Delete the raw image that was uploaded to s3
  ansible.builtin.shell: |
    aws s3 rm "s3://{{ ami_bucket_name }}/{{ artifact_filename | basename }}"
  register: artifact_delete_result

- name: Debug delete result
  ansible.builtin.debug:
    var: artifact_delete_result.stdout
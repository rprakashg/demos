---
- name: Check whether components listed in blueprint and dependencies are valid
  ansible.builtin.shell: |
    composer-cli --json blueprints depsolve {{ builder_blueprint_name }} | jq -r ".[].body.errors | length"
  register: depsolve_result

- name: fail when errors
  assert:
    that: 
    - depsolve_result.stdout != 0
    fail_msg: "Depsolve errors in blueprint" 
    
- name: Start edge commit
  when: ostree_url == ""
  block:
  - name: create edge commit
    ansible.builtin.shell: |
      composer-cli --json compose start-ostree {{ builder_blueprint_name }} edge-commit | jq -r ".[].body.build_id"
    register: edge_commit_result
  - name: set job id
    set_fact:
      job_id: "{{ edge_commit_result.stdout }}"

- name: Update commit
  when: not ostree_url == ""
  block:
  - name: create update commit    
    ansible.builtin.shell: |
      composer-cli --json compose start-ostree {{ builder_blueprint_name }} edge-commit --url="{{ ostree_url }}" --ref="{{ blueprint_rev }}" | jq -r ".[].body.build_id"
    register: update_commit_result
  - name: set job id
    set_fact:
      job_id: "{{ update_commit_result.stdout }}"

- name: wait for compose to finish
  ansible.builtin.shell: |
    composer-cli --json compose info {{ job_id }} | jq -r ".[].body.queue_status"
  until: check_status_result.stdout not in ["RUNNING", "WAITING"]
  retries: "{{ retries }}"
  delay: "{{ delay }}"
  register: check_status_result

- name: Download and untar compose artifact 
  when: check_status_result.stdout == "FINISHED"
  block:
  - name: create a temp dir
    ansible.builtin.tempfile:
      state: directory
      suffix: "{{ builder_blueprint_name }}"
    register: tempdir_result

  - name: set artifact dir
    set_fact:
      artifact_dir: "{{ tempdir_result.path }}"

  - name: download artifact
    ansible.builtin.shell: |
      composer-cli compose image {{ job_id }} --filename {{ artifact_dir }}/{{ builder_blueprint_name }}_{{ blueprint_version }}.tar

  - name: untar artifact
    ansible.builtin.unarchive:
      src: "{{ artifact_dir }}/{{ builder_blueprint_name }}_{{ blueprint_version }}.tar"
      dest: "{{ artifact_dir }}"
      remote_src: true

- name: Extract commit from artifact and commit to main ostree repo
  when: check_status_result.stdout == "FINISHED"
  become: true
  block:
    - name: get checksum
      ansible.builtin.command:
        cmd: "ostree --repo=repo rev-parse {{ blueprint_rev }}"
        chdir: "{{ artifact_dir }}"
      register: get_checksum_result
      changed_when: false
    
    - name: set checksum in fact
      set_fact:
        checksum: "{{ get_checksum_result.stdout }}"

    - name: extract commit from artifact
      ansible.builtin.command:
        cmd: "ostree --repo=repo pull-local {{ artifact_dir }}/repo {{ checksum }}"
        chdir: "/var/www/html/{{ builder_blueprint_name }}"
      changed_when: true

    - name: commit changes
      ansible.builtin.command:
        cmd: ostree --repo=repo commit -b "{{ blueprint_rev }}" -s "Release {{ blueprint_version }}" --add-metadata-string="blueprint={{ builder_blueprint_name }}" --add-metadata-string="version={{ blueprint_version }}" --tree=ref={{ checksum }}
        chdir: "/var/www/html/{{ builder_blueprint_name }}"
      changed_when: true 

    - name: copy compose.json
      ansible.builtin.copy:
        src: "{{ artifact_dir }}/compose.json"
        dest: "/var/www/html/{{ builder_blueprint_name }}/{{ checksum }}-compose.json"
        remote_src: yes

    - name: sync folder to s3
      community.aws.s3_sync:
        bucket: "{{ ostree_bucket_name }}"
        key_prefix: "{{ builder_blueprint_name }}"
        file_root: "/var/www/html/{{ builder_blueprint_name }}"
        storage_class: "STANDARD"
      register: sync_result
    - name: display sync result
      ansible.builtin.debug:
        var: sync_result
- name: Delete artifacts dir
  ansible.builtin.file:
    path: "{{ artifact_dir }}"
    state: absent
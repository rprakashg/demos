---
# default variables
fdo_keys_dir: "/etc/fdo/keys"

base_domain: sandbox2519.opentlc.com
flightctl_api: "https://api.apps.rhem-demo.sandbox2519.opentlc.com"
use_postgresql: false

manufacturing:
  desc: "FDO Manufacturing Server"
  name: fdo-manufacturing-server
  image: "registry.redhat.io/rhel9/fdo-manufacturing-server"
  port: 
    host_port: 8080
    container_port: 8080

rendezvous:
  desc: "FDO Rendezvous Server"
  name: fdo-rendezvous-server
  image: "registry.redhat.io/rhel9/fdo-rendezvous-server"
  port:
    host_port: 8082
    container_port: 8082

owner_onboarding:
  desc: "FDO Owner Onboarding Server"
  name: fdo-owner-onboarding-server
  image: "registry.redhat.io/rhel9/fdo-owner-onboarding-server"
  port: 
    host_port: 8081
    container_port: 8081

serviceinfo:
  desc: "FDO ServiceInfo API Server"
  name: fdo-serviceinfo-api-server
  image: "registry.redhat.io/rhel9/fdo-serviceinfo-api-server"
  port:
    host_port: 8083
    container_port: 8083
  files:
  - path: /etc/resolv.conf
    data: |
      # /etc/resolv.conf for edge devices
      # Managed with best practices for edge deployments

      # Primary and secondary DNS servers
      nameserver 1.1.1.1       # Cloudflare DNS
      nameserver 8.8.8.8       # Google Public DNS
      nameserver 9.9.9.9       # Quad9 DNS
      nameserver 192.168.1.1   # local router 
       
      # Optional: Define a domain for unqualified hostnames
      domain edge.local

      # Optional: Search domains for unqualified hostnames
      search edge.local corp.home.local

      # Reduce query timeout for faster failover
      options timeout:2

      # Attempt queries only once per server before failing over
      options attempts:1

      # Rotate through DNS servers for load balancing
      options rotate

      # Enable EDNS0 for better performance and support for larger responses
      options edns0

      # Ignore dynamic updates if resolv.conf is managed manually
      options no-dynamic
  commands:
  - command: flightctl
    args: ["login", "--insecure-skip-tls-verify", "{{ flightctl_api }}", "-t", "{{ bearer_token }}"]
    return_stdout: true
    return_stderr: true
  - command: flightctl
    args: ["certificate", "request", "--signer=enrollment", "--expiration=365d", "--output=embedded", "> /etc/flightctl"]
    return_stdout: true
    return_stderr: true
